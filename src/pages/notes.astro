---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Get all notes from content collection
const allNotes = await getCollection('notes');

// Get URL parameters for filtering
const url = new URL(Astro.request.url);
const selectedCategory = url.searchParams.get('category') || 'all';
const selectedDifficulty = url.searchParams.get('difficulty') || 'all';
const searchQuery = url.searchParams.get('search') || '';

// Filter notes based on parameters (server-side for category and difficulty only)
let filteredNotes = allNotes.filter(note => note.data.published);

if (selectedCategory !== 'all') {
  filteredNotes = filteredNotes.filter(note => note.data.category === selectedCategory);
}

if (selectedDifficulty !== 'all') {
  filteredNotes = filteredNotes.filter(note => note.data.difficulty === selectedDifficulty);
}

// Get unique categories and difficulties
const categories = ['all', ...new Set(allNotes.map(note => note.data.category))];
const difficulties = ['all', ...new Set(allNotes.map(note => note.data.difficulty))];


---

<Layout title="All Notes - DevNotes">
  <div class="container-responsive py-12 sm:py-16 lg:py-20">
    <!-- Header -->
    <div class="mb-12 lg:mb-16">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-6">
        <div>
          <div class="inline-flex items-center gap-3 px-4 py-2 bg-gradient-to-r from-primary-50 to-primary-100/50 dark:from-primary-900/20 dark:to-primary-800/20 rounded-full border border-primary-200/50 dark:border-primary-700/50 backdrop-blur-sm mb-6">
            <div class="w-2 h-2 bg-primary-500 rounded-full animate-pulse"></div>
            <span class="text-sm font-semibold text-primary-700 dark:text-primary-300">Technical Knowledge Base</span>
          </div>
          <h1 class="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-white mb-6">
            üìù All Notes
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300 leading-relaxed">
            Explore all technical notes, tutorials, and learning resources.
          </p>
        </div>
      </div>
    </div>

    <!-- Search and Filters -->
    <div class="mb-12 lg:mb-16 space-y-8">
      <!-- Search -->
      <div class="relative">
        <input 
          type="text" 
          placeholder="Search notes by title, description, or tags..." 
          class="search-input text-lg"
          id="search-input"
          value={searchQuery}
        >
        <div id="search-loading" class="absolute inset-y-0 right-16 flex items-center pointer-events-none hidden">
          <svg class="w-6 h-6 text-gray-400 animate-spin" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </div>
        <div class="absolute inset-y-0 right-0 pr-6 flex items-center pointer-events-none">
          <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>

      <!-- Filters -->
      <div class="flex flex-col lg:flex-row gap-6 lg:items-center lg:justify-between">
        <div class="flex flex-col sm:flex-row gap-6">
          <!-- Category Filter -->
          <div class="flex flex-col sm:flex-row sm:items-center gap-3">
            <label class="text-sm font-semibold text-gray-700 dark:text-gray-300">Category:</label>
            <select class="px-4 py-3 border border-gray-300/50 dark:border-dark-600/50 rounded-xl bg-white/80 dark:bg-dark-800/80 text-gray-900 dark:text-gray-100 text-base focus:ring-2 focus:ring-primary-500/30 focus:border-transparent transition-all duration-300 shadow-lg backdrop-blur-sm font-medium" id="category-filter">
              {categories.map(category => (
                <option value={category} selected={category === selectedCategory}>
                  {category === 'all' ? 'All Categories' : category.charAt(0).toUpperCase() + category.slice(1)}
                </option>
              ))}
            </select>
          </div>

          <!-- Difficulty Filter -->
          <div class="flex flex-col sm:flex-row sm:items-center gap-3">
            <label class="text-sm font-semibold text-gray-700 dark:text-gray-300">Difficulty:</label>
            <select class="px-4 py-3 border border-gray-300/50 dark:border-dark-600/50 rounded-xl bg-white/80 dark:bg-dark-800/80 text-gray-900 dark:text-gray-100 text-base focus:ring-2 focus:ring-primary-500/30 focus:border-transparent transition-all duration-300 shadow-lg backdrop-blur-sm font-medium" id="difficulty-filter">
              {difficulties.map(difficulty => (
                <option value={difficulty} selected={difficulty === selectedDifficulty}>
                  {difficulty === 'all' ? 'All Levels' : difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}
                </option>
              ))}
            </select>
          </div>
        </div>

        <!-- Sort By -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-3">
          <label class="text-sm font-semibold text-gray-700 dark:text-gray-300">Sort by:</label>
          <select class="px-4 py-3 border border-gray-300/50 dark:border-dark-600/50 rounded-xl bg-white/80 dark:bg-dark-800/80 text-gray-900 dark:text-gray-100 text-base focus:ring-2 focus:ring-primary-500/30 focus:border-transparent transition-all duration-300 shadow-lg backdrop-blur-sm font-medium" id="sort-filter">
            <option value="date-desc">Newest First</option>
            <option value="date-asc">Oldest First</option>
            <option value="title-asc">Title A-Z</option>
            <option value="title-desc">Title Z-A</option>
            <option value="difficulty-asc">Difficulty (Easy to Hard)</option>
            <option value="difficulty-desc">Difficulty (Hard to Easy)</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Search Results Info -->
    <div id="search-info" class="mb-8 p-6 bg-gradient-to-r from-green-50 to-green-100/50 dark:from-green-900/20 dark:to-green-800/20 rounded-2xl hidden border border-green-200/50 dark:border-green-800/50 backdrop-blur-sm">
      <div class="flex items-center justify-between">
        <p class="text-base text-green-800 dark:text-green-200 font-medium">
          <strong>Search Results:</strong>
          <span id="search-count">0</span> notes found for "<span id="search-term"></span>"
        </p>
        <button id="clear-search" class="text-sm text-green-600 dark:text-green-300 hover:text-green-800 dark:hover:text-green-100 font-semibold transition-colors duration-300 px-4 py-2 rounded-lg hover:bg-green-100/50 dark:hover:bg-green-800/30">
          Clear search
        </button>
      </div>
    </div>

    <!-- Notes Grid -->
    <div class="mb-12">
      <div id="notes-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-10 stagger-animation">
        {filteredNotes.map(note => (
          <article 
            class="card p-8 lg:p-10 card-hover group"
            data-category={note.data.category}
            data-difficulty={note.data.difficulty}
          >
            <div class="flex items-center justify-between mb-6">
              <span class="text-sm text-gray-500 dark:text-gray-400 font-medium">{note.data.date}</span>
              <span class="text-sm text-gray-500 dark:text-gray-400 font-medium">{note.data.readTime || '5 min read'}</span>
            </div>
            <h3 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white mb-4 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors duration-300 leading-tight">
              {note.data.title}
            </h3>
            <p class="text-gray-600 dark:text-gray-300 mb-6 text-base lg:text-lg leading-relaxed">
              {note.data.description}
            </p>
            <div class="flex flex-wrap gap-2 mb-6">
              {note.data.tags.map(tag => (
                <span class="tag">{tag}</span>
              ))}
            </div>
            <div class="flex items-center justify-between">
              <span class={`px-4 py-2 text-sm rounded-full font-semibold ${
                note.data.difficulty === 'beginner' ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300' :
                note.data.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' :
                'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'
              }`}>
                {note.data.difficulty}
              </span>
              <a href={`/notes/${note.slug}`} class="text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 text-sm font-semibold transition-colors duration-300 flex items-center gap-2">
                Read more 
                <svg class="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                </svg>
              </a>
            </div>
          </article>
        ))}
      </div>
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="text-center py-16 lg:py-20 hidden">
      <div class="text-gray-500 dark:text-gray-400 mb-8">
        <svg class="mx-auto h-20 w-20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
      </div>
      <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
        No notes found
      </h3>
      <p class="text-gray-600 dark:text-gray-300 mb-8 max-w-md mx-auto text-lg">
        Try adjusting your search or filters to find what you're looking for.
      </p>
      <button id="clear-all-filters" class="btn-primary text-lg px-8 py-4">
        Clear all filters
      </button>
    </div>
  </div>
</Layout>

<script>
  // Frontend-only search and filtering
  document.addEventListener('DOMContentLoaded', function() {
    // Get initial search query from URL
    const urlParams = new URLSearchParams(window.location.search);
    const initialSearchQuery = urlParams.get('search') || '';
    
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const difficultyFilter = document.getElementById('difficulty-filter') as HTMLSelectElement;
    const notesContainer = document.getElementById('notes-container') as HTMLElement;
    const noResults = document.getElementById('no-results') as HTMLElement;
    const searchInfo = document.getElementById('search-info') as HTMLElement;
    const searchCount = document.getElementById('search-count') as HTMLElement;
    const searchTerm = document.getElementById('search-term') as HTMLElement;
    const clearSearch = document.getElementById('clear-search') as HTMLElement;
    const clearAllFilters = document.getElementById('clear-all-filters') as HTMLElement;
    const searchLoading = document.getElementById('search-loading') as HTMLElement;

    if (!searchInput || !categoryFilter || !difficultyFilter || !notesContainer) {
      return;
    }

    // Store all notes for client-side filtering
    const allNotes = Array.from(notesContainer.children) as HTMLElement[];
    let searchTimeout: number;

    function performSearch() {
      const searchQuery = searchInput.value.toLowerCase().trim();
      const category = categoryFilter.value;
      const difficulty = difficultyFilter.value;

      let visibleNotes = 0;
      let searchResults = 0;

      allNotes.forEach(note => {
        const title = note.querySelector('h3')?.textContent?.toLowerCase() || '';
        const description = note.querySelector('p')?.textContent?.toLowerCase() || '';
        const tags = Array.from(note.querySelectorAll('.tag')).map(tag => tag.textContent?.toLowerCase() || '');
        const noteCategory = note.getAttribute('data-category') || '';
        const noteDifficulty = note.getAttribute('data-difficulty') || '';

        // Check category and difficulty filters
        const categoryMatch = category === 'all' || noteCategory === category;
        const difficultyMatch = difficulty === 'all' || noteDifficulty === difficulty;

        // Check search query
        const searchMatch = !searchQuery || 
          title.includes(searchQuery) || 
          description.includes(searchQuery) || 
          tags.some(tag => tag.includes(searchQuery));

        // Show/hide note based on all filters
        if (categoryMatch && difficultyMatch && searchMatch) {
          note.style.display = 'block';
          visibleNotes++;
          if (searchQuery) searchResults++;
        } else {
          note.style.display = 'none';
        }
      });

      // Update UI
      updateSearchUI(searchQuery, searchResults, visibleNotes);
    }

    function updateSearchUI(searchQuery: string, searchResults: number, visibleNotes: number) {
      // Update search info
      if (searchQuery) {
        searchInfo.classList.remove('hidden');
        searchCount.textContent = searchResults.toString();
        searchTerm.textContent = searchQuery;
      } else {
        searchInfo.classList.add('hidden');
      }

      // Show/hide no results message
      if (visibleNotes === 0) {
        notesContainer.style.display = 'none';
        noResults.classList.remove('hidden');
      } else {
        notesContainer.style.display = 'grid';
        noResults.classList.add('hidden');
      }
    }

    // Search input events with debounce
    searchInput.addEventListener('input', () => {
      // Show loading indicator
      searchLoading?.classList.remove('hidden');
      
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        performSearch();
        // Hide loading indicator
        searchLoading?.classList.add('hidden');
      }, 300); // 300ms delay
    });

    // Filter change events
    categoryFilter.addEventListener('change', performSearch);
    difficultyFilter.addEventListener('change', performSearch);

    // Clear search button
    clearSearch?.addEventListener('click', () => {
      searchInput.value = '';
      performSearch();
    });

    // Clear all filters button
    clearAllFilters?.addEventListener('click', () => {
      searchInput.value = '';
      categoryFilter.value = 'all';
      difficultyFilter.value = 'all';
      performSearch();
    });

    // Initialize search on page load
    performSearch();
    
    // If there's a search query in the URL, show search results
    if (initialSearchQuery) {
      searchInfo.classList.remove('hidden');
      searchCount.textContent = '0'; // Will be updated by performSearch
      searchTerm.textContent = initialSearchQuery;
    }
  });
</script> 